.\" Manpage for symlinkit
.\" Save as symlinkit.1 in ~/.local/share/man/man1/
.TH SYMLINKIT 1 "September 2025" "1.6.0" "User Commands"
.SH NAME
symlinkit \- flexible symlink helper with intelligent fzf fallback, dry-run, and symlink overview tools
.SH SYNOPSIS
.B symlinkit
[OPTIONS] [SOURCE] [DESTINATION]
.SH DESCRIPTION
The
.B symlinkit
command simplifies creating and inspecting symbolic links, with intelligent
interactive selection, merge/overwrite modes, dry-run previews, and inspection utilities.

An operation flag (\fB-o\fR, \fB-m\fR, or \fB-d\fR) is required for
symlink creation or deletion operations. Inspection commands like
\fB--list\fR, \fB--tree\fR, \fB--broken\fR do not require operation flags.

If SOURCE or DESTINATION are not provided, you will be prompted interactively:
.br
\- With \fBfzf\fR (if available): Interactive fuzzy finder with preview
.br
\- Without \fBfzf\fR: Manual prompts for typing directory paths

In addition to symlink creation, symlinkit can list existing symlinks, show
broken symlinks, produce overviews with \fBtree\fR, and output results in JSON.

.SH OPTIONS
.TP
.B -o
Overwrite mode (remove existing target, replace with symlink).
.TP
.B -m
Merge mode (recursively symlink contents into destination).
.TP
.B -d
Delete mode (remove a symlink). Requires a symlink path as argument.
Shows the symlink target before deletion. Supports \fB--dry-run\fR.
.TP
.B --dry-run
Preview actions (conflicts default to skip).
.TP
.B --dry-run-overwrite
Preview actions (conflicts default to overwrite).
.TP
.B --fzf
Force fzf usage (error if not installed). Use this for scripts requiring
consistent interactive behavior.
.TP
.B --no-fzf
Disable fzf and use manual prompts only, even if fzf is available.
Useful for minimal environments or when scripting requires text-based input.
.TP
.B --tree
Show a minimal directory tree (symlink arrows only).  
May be used standalone (\fBsymlinkit --tree DIR\fR) or after linking
(\fBsymlinkit -o SRC DEST --tree\fR).
.TP
.B --tree-verbose
Show a verbose directory tree with permissions and symlink arrows.  
Also works standalone or after linking.
.TP
.B --list [DIR]
List all symlinks under DIR.
If no DIR is provided, defaults to $HOME.
.TP
.B --broken [DIR]
List only broken symlinks under DIR.
If no DIR is provided, defaults to $HOME.
.TP
.TP
.B --count-only [DIR]
Show only the total number of symlinks under DIR (default: $HOME).
.TP
.B --depth N
Limit overview, tree, and fix-broken search depth (default: 3).
.TP
.B --sort path|target
Sort results by path or symlink target.
.TP
.B --json
Output results in JSON format (applies to \fB--list\fR, \fB--broken\fR, and
\fB--count-only\fR). If no other mode is specified, defaults to list mode.
Works with or without \fBjq\fR (uses fallback formatting if \fBjq\fR unavailable).
.TP
.B --fix-broken [DIR]
Interactively fix broken symlinks under DIR (default: $HOME).
For each broken link, you can delete, update the target (with an optional fzf picker),
or skip. The \fB--depth\fR option applies to the interactive search picker.
A summary of actions is shown at the end.
.TP
.B -h, --help
Show a colorized help message.
.TP
.B -v, --version
Show version number and detected platform (Linux, macOS, or WSL).

.SH EXAMPLES
List symlinks in $HOME:
.nf
symlinkit --list
.fi

List broken symlinks in /etc:
.nf
symlinkit --broken /etc
.fi

JSON output of symlinks in ~/bin:
.nf
symlinkit --json ~/bin
.fi

JSON output of broken symlinks:
.nf
symlinkit --json --broken ~/bin
.fi

Minimal tree view of ~/.config:
.nf
symlinkit --tree ~/.config
.fi

Verbose tree view of ~/.config:
.nf
symlinkit --tree-verbose ~/.config
.fi

Fix broken symlinks under $HOME:
.nf
symlinkit --fix-broken
.fi

Overwrite:
.nf
symlinkit -o ~/dotfiles/config ~/.config
.fi

Merge contents:
.nf
symlinkit -m ~/dotfiles/scripts ~/bin
.fi

Delete a symlink:
.nf
symlinkit -d ~/.config/nvim
.fi

Preview delete (dry-run):
.nf
symlinkit --dry-run -d ~/.local/bin/old-link
.fi

Force fzf usage:
.nf
symlinkit --fzf --list
.fi

Use manual prompts only:
.nf
symlinkit --no-fzf --broken ~/dotfiles
.fi

.SH TESTING
symlinkit includes a comprehensive test suite for validation across different environments.

For help with testing commands:
.nf
./generate-tests.sh -h      # Show test generation help
./run_tests.sh -h           # Show test runner help
.fi

To run tests, first generate them locally:
.nf
./generate-tests.sh
.fi

Then run the test suite:
.nf
./run_tests.sh
.fi

Individual test suites can be run separately:
.nf
./simple_test.sh           # Basic functionality tests
./test_json_fallback.sh     # JSON functionality without jq
.fi

Tests are generated locally and not committed to the repository,
keeping the codebase clean while allowing thorough validation.

.SH AUTHOR
Written by Adrian Thomas.

.SH SEE ALSO
ln(1), fzf(1), tree(1), find(1), jq(1)

.SH VERSION
symlinkit 1.6.0 (September 2025)

.SH REPORTING BUGS
Report issues or feature requests at:
.B https://github.com/ctrl-alt-adrian/symlinkit/issues

